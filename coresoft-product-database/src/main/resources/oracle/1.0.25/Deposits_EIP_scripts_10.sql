ALTER TABLE TRANSACTION_POSTTODAY ADD (
TXN_REVIEW VARCHAR2(10), 
STATE VARCHAR2(20), 
DECISION_TYPE VARCHAR2(10), 
WAIVE_FEE NUMBER(1,0), 
WAIVE_NOTICES NUMBER(1,0), 
REMARKS VARCHAR2(100)
);


CREATE OR REPLACE VIEW ACCOUNT_DETAILS_VW(ACCOUNT_ID, ACCOUNT_NO, INSTITUTION_ID, LEDGER_BALANCE, AVAILABLE_BALANCE, 
CURRENT_BALANCE, UNCOLLECTED_BALANCE, OVERDRAFT_CODE, DATE_OPENED, DATE_LAST_MAINTAINED, TIMES_NSF_CURR_PERIOD, TIMES_NSF_YTD, 
TIMES_OD_CURR_PERIOD, TIMES_OD_YTD, OVERDRAFT_LIMIT) AS 
(SELECT acc.account_id,de.ACCOUNT_NO,acc.INSTITUTION_ID, de.LEDGER_BALANCE,de.AVAILABLE_BALANCE,
de.CURRENT_BALANCE,de.UNCOLLECTED_BALANCE,de.OVERDRAFT_CODE,acc.date_opened,de.DATE_LAST_MAINTAINED,
de.TIMES_NSF_CURR_PERIOD,de.TIMES_NSF_YTD,
de.TIMES_OD_CURR_PERIOD,de.TIMES_OD_YTD,de.OVERDRAFT_LIMIT FROM ACCOUNT acc, DEPOSIT de
WHERE acc.ACCOUNT_ID = de.ACCOUNT_ID
);

CREATE OR REPLACE VIEW TPT_TXN_REVIEW_VW (TRANSACTION_ID, AMOUNT, TRANS_CODE, INSTITUTION_ID, ACCOUNT_NUMBER, ACCOUNT_ID, 
ACCOUNT_TYPE_ID, DESCRIPTION, EFFECTIVE_DATE, ENTRY_DATE, POST_STATUS, REASON_ID, REASON_DESCRIPTION, REASON_DETAIL, 
CHEQUE, EVENT_ID, FILE_NAME, PAYMENT_ID, POST_DATE, SOURCE_NAME, TRACE_NUMBER, BATCH_NUMBER, SERIAL_NUMBER, 
COMPANY_NAME, COMPANY_DESCRIPTION, COMPANY_CUST_NUMBER, COMPANY_ID, ENTRY_TYPE_ID, ACH_TRAN_CODE, 
ACH_STANDARD_ENTRY_CLASS_CODE, ACH_FRABA_ID, ACH_PROCESSING_DATE, ACH_DFI_ACCOUNT_NUMBER, REQUIRED_PARAMS, 
ACH_CHECK_SERIAL_NUMBER, TRANS_ACCOUNT_NO, TRANS_INSTITUTION_ID, TRANS_ACCOUNT_ID, STOP_PAYMENT_INST_ID, 
OPERATOR_ID, ORIGIN_INSTITUTION_ID, REVERSAL_DATE, TERMINAL_IDENTIFICATION_CODE, TERMINAL_LOCATION, TERMINAL_CITY, 
TERMINAL_STATE, ROUTING_TRANSIT_NUMBER, TXN_REVIEW, STATE, DECISION_TYPE, WAIVE_FEE, WAIVE_NOTICES, REMARKS, 
ASSIGNED_BRANCH, BRANCH_NAME) AS 
  (select tpt.TRANSACTION_ID,tpt.AMOUNT,tpt.TRANS_CODE,tpt.INSTITUTION_ID,tpt.ACCOUNT_NUMBER,tpt.ACCOUNT_ID,
tpt.ACCOUNT_TYPE_ID,tpt.DESCRIPTION,tpt.EFFECTIVE_DATE,tpt.ENTRY_DATE,tpt.POST_STATUS,tpt.REASON_ID,
tpt.REASON_DESCRIPTION,tpt.REASON_DETAIL,tpt.CHEQUE,tpt.EVENT_ID,tpt.FILE_NAME,tpt.PAYMENT_ID,
tpt.POST_DATE,tpt.SOURCE_NAME,tpt.TRACE,tpt.BATCH_NUMBER,tpt.SERIAL_NUMBER,tpt.COMPANY_NAME,
tpt.COMPANY_DESCRIPTION,tpt.COMPANY_CUST_NUMBER,tpt.COMPANY_ID,tpt.ENTRY_TYPE_ID,tpt.ACH_TRAN_CODE,
tpt.ACH_STANDARD_ENTRY_CLASS_CODE,tpt.ACH_FRABA_ID,tpt.ACH_PROCESSING_DATE,tpt.ACH_DFI_ACCOUNT_NUMBER,tpt.REQUIRED_PARAMS,
tpt.ACH_CHECK_SERIAL_NUMBER,tpt.TRANS_ACCOUNT_NO,tpt.TRANS_INSTITUTION_ID,tpt.TRANS_ACCOUNT_ID,tpt.STOP_PAYMENT_INST_ID,
tpt.OPERATOR_ID,tpt.ORIGIN_INSTITUTION_ID,tpt.REVERSAL_DATE,tpt.TERMINAL_IDENTIFICATION_CODE,tpt.TERMINAL_LOCATION,
tpt.TERMINAL_CITY,tpt.TERMINAL_STATE,tpt.ROUTING_TRANSIT_NUMBER,tpt.TXN_REVIEW,tpt.STATE,tpt.DECISION_TYPE,
tpt.WAIVE_FEE,tpt.WAIVE_NOTICES,tpt.REMARKS, br.branch_id branch_id, br.branch_name from transaction_posttoday tpt, deposit_account da, branch br
where tpt.account_id = da.ACCOUNT_ID(+)
and da.ASSIGNED_BRANCH = br.unique_id(+)
and tpt.txn_review = 'yes'
);

CREATE OR REPLACE VIEW HOLD_PAYMENT_VIEW (INSTRUCTION_ID, ACCOUNT_ID, CREATED_DATE, EFFECTIVE_EXPIRE_DATE, HOLD_AMOUNT) AS 
  (select dai.instruction_id, dai.account_id, dai.created_date, dai.effective_expire_date, hp.hold_amount
from deposit_account_instruction dai, hold_payment hp
where dai.instruction_id = hp.instruction_id
and hp.hold_status = 1
);

CREATE OR REPLACE VIEW PARTY_ADDRESS_VIEW_1 (PARTY_ID, ADDRESS_ID, LINE_1, LINE_2, CITY, STATE, ZIP_1, PHONE, 
ADDRESS_USE, ADDRESS_TYPE, EMAIL) AS 
SELECT PA.PARTY_ID,PA.ADDRESS_ID,GA.LINE_1,GA.LINE_2,GA.CITY,GA.STATE,GA.ZIP_1,TA.PHONE,
PA.ADDRESS_USE,A.ADDRESS_TYPE,WA.EMAIL_ADDRESS_1
FROM PARTY_ADDRESS PA,GEOGRAPHIC_ADDRESS GA,TELECOM_ADDRESS TA,ADDRESS A, WEB_ADDRESS WA
WHERE 
PA.ADDRESS_ID = A.ADDRESS_ID
AND PA.ADDRESS_ID = GA.ADDRESS_ID (+)
AND PA.ADDRESS_ID = TA.ADDRESS_ID (+)
AND PA.ADDRESS_ID = WA.ADDRESS_ID (+)
;

CREATE OR REPLACE VIEW PARTY_ACCOUNT_ROLE_VW (ACCOUNT_NO, PARTY_TYPE, PARTY_NAME, BUSINESS_NAME, FIRST_NAME, ACCOUNT_ID, 
LAST_NAME, EMPLOYER_NAME, RESPONSIBILITY_TYPE, ROLE_CREATION_DATE, BUSINESS_DATE, ASSOCIATION_DATE, 
RELATIONSHIP_WITH_INSTITUTION, ASSIGNED_OFFICER, PARTY_ID, INSTITUTION_ID, INSTITUTION_ASSOCIATION_ID, 
UNIQUE_PARTY_ROLE_ID, ROLE_TYPE_ID, UNIQUE_ASSOCIATION_ID) AS 
SELECT DE.ACCOUNT_NO, PV.PARTY_TYPE, PV.PARTY_NAME, PV.BUSINESS_NAME, PV.FIRST_NAME,par.account_id, PV.LAST_NAME, 
PV.EMPLOYER_NAME, AO.RESPONSIBILITY_TYPE, PR.ROLE_CREATION_DATE, PR.BUSINESS_DATE, PIA.ASSOCIATION_DATE, 
PIA.RELATIONSHIP_WITH_INSTITUTION, PIA.ASSIGNED_OFFICER,PV.PARTY_ID, PIA.INSTITUTION_ID, 
PIA.INSTITUTION_ASSOCIATION_ID, PR.UNIQUE_PARTY_ROLE_ID, PR.ROLE_TYPE_ID, PR.UNIQUE_ASSOCIATION_ID 
FROM PARTY_ROLE PR, PARTY_ACCOUNT_ROLE PAR, PARTY_VW PV, ACCOUNT_OWNER AO, PARTY_INSTITUTION_ASSOCIATION PIA, 
ACCOUNT A, DEPOSIT DE WHERE PR.UNIQUE_PARTY_ROLE_ID = PAR.UNIQUE_PARTY_ROLE_ID AND 
PAR.UNIQUE_PARTY_ROLE_ID = AO.UNIQUE_PARTY_ROLE_ID AND PIA.PARTY_ID = PV.PARTY_ID AND A.ACCOUNT_ID = PAR.ACCOUNT_ID 
AND PAR.ACCOUNT_ID = DE.ACCOUNT_ID AND PR.UNIQUE_ASSOCIATION_ID = PIA.UNIQUE_ASSOCIATION_ID
;

CREATE OR REPLACE VIEW PARTY_INFO_VIEW (ACCOUNT_NO, PARTY_TYPE, PARTY_NAME, BUSINESS_NAME, FIRST_NAME, 
ACCOUNT_ID, LAST_NAME, EMPLOYER_NAME, RESPONSIBILITY_TYPE, ROLE_CREATION_DATE, BUSINESS_DATE, 
ASSOCIATION_DATE, RELATIONSHIP_WITH_INSTITUTION, ASSIGNED_OFFICER, PARTY_ID, INSTITUTION_ID, 
INSTITUTION_ASSOCIATION_ID, UNIQUE_PARTY_ROLE_ID, ROLE_TYPE_ID, UNIQUE_ASSOCIATION_ID) AS 
(select ACCOUNT_NO,PARTY_TYPE,PARTY_NAME,BUSINESS_NAME,FIRST_NAME,ACCOUNT_ID,LAST_NAME,EMPLOYER_NAME,
RESPONSIBILITY_TYPE,ROLE_CREATION_DATE,BUSINESS_DATE,ASSOCIATION_DATE,RELATIONSHIP_WITH_INSTITUTION,
ASSIGNED_OFFICER,PARTY_ID,INSTITUTION_ID,INSTITUTION_ASSOCIATION_ID,UNIQUE_PARTY_ROLE_ID,ROLE_TYPE_ID,
UNIQUE_ASSOCIATION_ID from PARTY_ACCOUNT_ROLE_VW
where RESPONSIBILITY_TYPE in (6, 9)
);

CREATE OR REPLACE VIEW STOP_PAYMENT_VIEW (INSTRUCTION_ID, ACCOUNT_ID, CREATED_DATE, EFFECTIVE_EXPIRE_DATE, FEE_AMOUNT) AS 
(select dai.instruction_id, dai.account_id, dai.created_date, dai.effective_expire_date, 
spi.fee_amount from deposit_account_instruction dai, stop_payment_instruction spi
where dai.instruction_id = spi.instruction_id
and spi.stop_status = 1)
;
